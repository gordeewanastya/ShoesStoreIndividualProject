create database shoes_store_db;

--create category table
CREATE TABLE category(
                         category_id SERIAL PRIMARY KEY,
                         size_cm numeric(5,2),
                         size_eu numeric(5,1),
                         size_us numeric(5,1)
);


--create product table

CREATE TABLE product(
                        prod_id SERIAL PRIMARY KEY,
                        prod_name varchar(70) NOT NULL,
                        prod_price numeric(6,1) NOT NULL,
                        prod_qty numeric(10) NOT NULL,
                        prod_size_category int,
                        created_at TIMESTAMP DEFAULT current_timestamp,
                        modified_at TIMESTAMP,
                        deleted_at TIMESTAMP,
                        FOREIGN KEY(prod_size_category) REFERENCES category(category_id)

);

-------------UPDATING modified_at and deleted_at columns triggers-----------------
CREATE TRIGGER update_product_createtime BEFORE INSERT ON product
    FOR EACH ROW EXECUTE PROCEDURE  update_created_column();

CREATE TRIGGER update_product_modtime BEFORE UPDATE ON product
    FOR EACH ROW EXECUTE PROCEDURE  update_modified_column();

CREATE TRIGGER update_product_deletetime BEFORE DELETE ON product
    FOR EACH ROW EXECUTE PROCEDURE  update_deleted_column();


CREATE OR REPLACE FUNCTION update_created_column()
    RETURNS TRIGGER AS $$
BEGIN
    NEW.created_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE OR REPLACE FUNCTION update_modified_column()
    RETURNS TRIGGER AS $$
BEGIN
    NEW.modified_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE OR REPLACE FUNCTION update_deleted_column()
    RETURNS TRIGGER AS $$
BEGIN
    NEW.deleted_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';



-------------UPDATING modified_at and deleted_at columns triggers-----------------



--create admin table

CREATE TABLE admin(
                      admin_id SERIAL PRIMARY KEY,
                      admin_fname varchar(50),
                      admin_lname varchar(50),
                      admin_login varchar(85),
                      admin_password varchar(85)
);

--INSERT INTO CATEGORY TABLE
insert into category(size_cm, size_eu, size_us) values(24.8, 38.5, 7.5);
insert into category(size_cm, size_eu, size_us) values(25.1, 39, 8);
insert into category(size_cm, size_eu, size_us) values(26.0, 40, 10);
insert into category(size_cm, size_eu, size_us) values(26.7, 41, 10.5);
insert into category(size_cm, size_eu, size_us) values(27.6, 41.5, 11);

select * from category;


--INSERT INTO PRODUCT TABLE
INSERT INTO product(prod_name, prod_price, prod_qty, prod_size_category)
VALUES('Nike Air Zoom G.T.', '170', 54,3);
INSERT INTO product(prod_name, prod_price, prod_qty, prod_size_category)
VALUES('Nike Dunk High Retro', '135', 122,5);
INSERT INTO product(prod_name, prod_price, prod_qty, prod_size_category)
VALUES('Nike Air Jordan 1 Low', '110', 45,2);
INSERT INTO product(prod_name, prod_price, prod_qty, prod_size_category)
VALUES('Nike Air Jordan 6 Retro', '200', 20,4);

select * from product;



--create customer table
create table customer(
    cust_id SERIAL PRIMARY KEY,
    cust_name varchar(70),
    cust_email varchar(65)
);



--create order table
--in entity class order_creation_date will be String

create table order_info(
    order_id SERIAL PRIMARY KEY,
    customer_id int,
    order_total numeric(6,2),
    order_creation_date varchar(50),
    FOREIGN KEY(customer_id) REFERENCES customer(cust_id)
);


--create shopping_cart_item table

create table shopping_cart_item(
    cart_item_id SERIAL PRIMARY KEY,
    product_id int,
    cart_item_qty int,
    cart_item_amount numeric(6,2),
    order_id int,
    FOREIGN KEY(order_id) REFERENCES order_info(order_id)
);



